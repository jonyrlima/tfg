//****************************************************************************
// SPHERE by : Menasoft ï¿½1997-2016
// www.sphereserver.net
// All SPHERE script files and formats are copyright Menasoft & Partners.
// This file may be freely edited for personal use, but may not be distributed
// in whole or in part, in any format without express written permission from
// Menasoft & Partners.  All donations and contributions
// become the property of Menasoft & Partners.
//****************************************************************************
// FILE LAST UPDATED: Tuesday, Jun 28, 2016
//
VERSION=0.56d

[COMMENT sphere_serv_triggers]
This file contains functions that are triggered by server actions.

[PLEVEL 7]
f_axis_preload
f_onaccount_connect
f_onaccount_create
f_onaccount_login
f_onaccount_delete
f_onaccount_pwchange
f_onchar_create
f_onchar_delete
f_onserver_start
f_onserver_save
f_onserver_save_ok
f_onserver_save_fail
f_onserver_save_finished
f_onserver_exit
f_onserver_blockip

[FUNCTION f_axis_preload]
// This is called every time someone connects from Axis to retrieve information
// local.account --> Account name of connecting client
// local.IP --> IP address of connecting client
// RETURN
//	  0 --> Deny access (close connection with no info sent) (no message sent)
//	  1 --> Deny access (close connection with no info sent) (send deny message)
//    2 --> normal action (allow information to be sent)

[FUNCTION f_onaccount_connect]	//Read carefully
// The f_onaccount_login function is called before the sent password is checked.
// local.account --> username of the account connecting.
// local.password --> password given.
// RETURN
//	  0 --> Let Sphere do its password checks.
//	  1 --> Deny access asuming the given password is wrong.
//	  6 --> Force login, without other password checks than the made in this function.
serv.servip 18.231.162.132

[FUNCTION f_onaccount_create]
// The f_onaccount_create function is called before the account is created.
// ARGS --> username of the account being created.
// RETURN
//	  0 --> normal action (create)
//	  1 --> account not created


[FUNCTION f_onaccount_login]
// The f_onaccount_login function is called after client entered the password.
// ARGS --> username of the client logging in
// ARGO --> the client logging in
// RETURN
//	  0 --> normal action (login)
//	  1 --> disconnect the client

[FUNCTION f_onaccount_delete]
// The f_onaccount_delete function is called before an account is deleted.
// ARGS --> username of the account being deleted.
// RETURN
//	  0 --> normal action (delete)
//	  1 --> account not deleted



[FUNCTION f_onaccount_pwchange]
// The f_onaccount_pwchange function is called when the password is being changed in one account
// ARGS --> password given
// RETURN
//	  0 --> normal action (change password)
//	  1 --> block the change


[FUNCTION f_onchar_create]
// The f_onchar_create function is called after client created a new char.
// SRC   --> char being created
// ARGN1 --> flags
// ARGN2 --> profession chosen
// ARGN3 --> race (1=human, 2=elf, 3=gargoyle)
// ARGS  --> account name
// ARGO  --> the client creating the character
// RETURN
//	  0 --> normal action (create character)
//	  1 --> denyes creation

IF (<ARGN3>==2)	//Uncomment this code to disable the racial bonus of MaxMana +20 for Elfs
 MaxMana
ENDIF

IF <ARGN3> != 1
  RETURN 1
ENDIF

//f_meditation_setup	// Uncomment this line to enable passive meditation (more info on sphere_skills.scp).

SRC.F_GO 5466,1103
src.f_reiniciar_buffs
IF (STRMATCH(*.*,<ARGS>))
 SERV.LOG Illegal account name (contains .)!
 RETURN 1
ENDIF
IF (STRMATCH(*EOF*,<ARGS>))
 SERV.LOG Illegal account name (contains EOF)!
 RETURN 1
ENDIF
//src.timerf 1,f_CHECKCADASTROGLOBAL
src.timerf 1,f_checkname

[FUNCTION f_onchar_delete]
// The f_onchar_delete function is called before a player char get deleted.
// SRC  --> char being deleted
// ARGO --> the client deleting the character (only set if the char is being deleted from client Character Selection menu)
// RETURN
//	  0 --> normal action (delete char)
//	  1 --> denyes deletion
RETURN 1

[FUNCTION f_onserver_start]
// The f_onserver_start function is called on server startup.

//Serv.ServIP ip.address //Add your public IP here (not domain) if you are behind a router.
//serv.servip uo.tfgshard.com.br
serv.servip 18.231.162.132
DB.CONNECT
IF (<DB.CONNECTED>)
SERV.LOG MySQL debug: MySQL successfully connected!
ELSE
SERV.LOG MySQL debug: MySQL not connected!
ENDIF

f_verify_scheduler

[FUNCTION f_onserver_save]
// The f_onserver_save function is called before server is going to save.
// ARGN1 --> save is forced (writable)
// ARGN2 --> save stage (for backgroud save goes 1 to 6146 [sector count + 2])
// RETURN
//	  0 --> normal action (save)
//	  1 --> denyes save
//serv.f_acc_update

[FUNCTION f_onserver_save_ok]
// This function is called after server has saved correctly (once per stage with background save).

f_criar_contas_direto
f_vincular_contas_direto
f_m_senhas_direto
f_automatic_events
f_recover_2016_items
f_fix_pvp_ranking <SERV.RTIME.FORMAT %Y-%m-%d>
//rankshow

[FUNCTION f_onserver_save_fail]
// This function is called after server hasn't saved correctly (once per stage with background save).


[FUNCTION f_onserver_save_finished]
// The f_onserver_save_finished function is called after server completely
// finished saving (also at end of background save).
// ARGS --> Time it took to save (in seconds, 4 digit precision)
forinstances m_jail_clocker
  IF <TOPOBJ.ISONLINE>
 	 TOPOBJ.TAG.LOGJAILTIME = <timer>
  ENDIF
Endfor
forinstances i_memory_areavip
  if <topobj.isonline>
    TAG0.SAVE_TIMER = <TIMER>
  endif
endfor
SERV.B @0481 Tempo do Save: <ARGS> Secs. <Serv.Items> Itens
//SERV.B @0481 Mem. Utilizada: <eval (<Serv.sMem>)> KBytes
IF (<SERV.CLIENTS> > <VAR0.MAXCLIENTS2017>)
	VAR.MAXCLIENTS2017=(<SERV.CLIENTS>)
	SERV.B @0481 Novo Record 2018 Online  !
	SERV.B @0481 Online: (<eval (<SERV.CLIENTS>)>) / Recorde 2018: (<eval <VAR.MAXCLIENTS2017>>) / Recorde: (<eval <VAR.MAXCLIENTS>>)
ELSE
	SERV.B @0481 Online: (<eval (<SERV.CLIENTS>)>) / Recorde 2018: (<eval <VAR.MAXCLIENTS2017>>) / Recorde: (<eval <VAR.MAXCLIENTS>>)
ENDIF

[FUNCTION f_onserver_exit]
// This function is called when a server is triggeted a shutdown, after all
// saves and everything finished

[FUNCTION f_onserver_blockip]
// The f_onserver_blockip function is called when an IP is blocked from the
// server.
// ARGS  --> IP being blocked
// ARGN1 --> Time to block the IP for in tenths of a second (writable)

[function f_oncommand]
IF (STRCMPI("<ARGS>", "DISCONNECT") == 0)
  RETURN 1
ENDIF

if (<isevent.e_logplayer>)
  serv.writefile logs/CMDaccount_<account>.LOG Comando: <args> --- <serv.rtime> (<account>) (<name>) (<P>)
elif (<account.PLEVEL> > 1)
  serv.writefile logs/StaffCMDLog_<account>.LOG Comando: <args> --- <serv.rtime> (<account>) (<name>) (<P>)
endif

[EOF]
